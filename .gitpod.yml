image:
  file: Dockerfile

tasks:
  - name: Setup Training Environment
    init: |
      mkdir -p /workspace/app/data
      # Create a simple dashboard for the training
      echo "Creating sample dashboard..."
      cat > /workspace/sample_dashboard.py << EOL
import streamlit as st
import pandas as pd
import numpy as np

# Configure the page
st.set_page_config(page_title="Windsurf Training Dashboard", page_icon="ðŸ“Š", layout="wide")

# Add custom CSS for the green theme
st.markdown("""
<style>
    .stApp {
        background-color: #f5f5f5;
    }
    .stButton>button {
        background-color: #28a745;
        color: white;
    }
    .stProgress .st-bo {
        background-color: #28a745;
    }
    h1, h2, h3 {
        color: #28a745;
    }
</style>
""")

# Title and introduction
st.title("Windsurf Training Dashboard")
st.markdown("Welcome to your personal Windsurf training environment. This dashboard demonstrates basic functionality.")

# Load the dataset
try:
    df = pd.read_csv('/workspace/app/data/dataset.csv')
    st.success(f"Dataset loaded successfully with {len(df)} rows and {len(df.columns)} columns")
except Exception as e:
    st.error(f"Error loading dataset: {e}")
    # Create a sample dataset for demonstration
    st.warning("Using sample data for demonstration")
    df = pd.DataFrame(
        np.random.randn(100, 5),
        columns=['A', 'B', 'C', 'D', 'E']
    )

# Sidebar for filters
st.sidebar.header("Dashboard Controls")

# Add sample filters
if len(df.columns) > 0:
    selected_columns = st.sidebar.multiselect(
        "Select columns to display",
        df.columns,
        default=list(df.columns[:3])
    )
    
    # Filter by numeric range if numeric columns exist
    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
    if numeric_cols:
        selected_filter = st.sidebar.selectbox("Filter by column", numeric_cols)
        min_val, max_val = float(df[selected_filter].min()), float(df[selected_filter].max())
        filter_range = st.sidebar.slider(
            f"Range for {selected_filter}",
            min_val, max_val, (min_val, max_val)
        )
        filtered_df = df[(df[selected_filter] >= filter_range[0]) & (df[selected_filter] <= filter_range[1])]
    else:
        filtered_df = df
    
    # Apply column selection
    if selected_columns:
        filtered_df = filtered_df[selected_columns]
    
    # Display the data
    st.subheader("Data Explorer")
    st.dataframe(filtered_df)
    
    # Add some visualizations
    st.subheader("Data Visualization")
    chart_type = st.sidebar.selectbox(
        "Select chart type",
        ["Bar Chart", "Line Chart", "Scatter Plot"]
    )
    
    if numeric_cols:
        col1, col2 = st.columns(2)
        
        with col1:
            if chart_type == "Bar Chart":
                st.bar_chart(filtered_df[numeric_cols[:2]] if len(numeric_cols) > 1 else filtered_df[numeric_cols[0]])
            elif chart_type == "Line Chart":
                st.line_chart(filtered_df[numeric_cols[:2]] if len(numeric_cols) > 1 else filtered_df[numeric_cols[0]])
            else:  # Scatter Plot
                if len(numeric_cols) > 1:
                    x_col = st.selectbox("X-axis", numeric_cols)
                    y_col = st.selectbox("Y-axis", [col for col in numeric_cols if col != x_col] if len(numeric_cols) > 1 else numeric_cols)
                    st.scatter_chart(filtered_df, x=x_col, y=y_col)
                else:
                    st.warning("Need at least 2 numeric columns for scatter plot")
        
        with col2:
            # Show summary statistics
            st.subheader("Summary Statistics")
            st.dataframe(filtered_df[numeric_cols].describe())
else:
    st.warning("No columns available in the dataset")

# Add a section for user notes
st.subheader("Training Notes")
user_notes = st.text_area("Enter your notes here", "")
if st.button("Save Notes"):
    st.success("Notes saved successfully!")

# Footer
st.markdown("---")
st.markdown("Windsurf Training Environment - Created for your training session")
EOL
      echo "Environment setup complete!"
    command: |
      echo "Starting Streamlit dashboard..."
      streamlit run /workspace/sample_dashboard.py

ports:
  - port: 8501
    onOpen: open-preview
    visibility: public

vscode:
  extensions:
    - ms-python.python
    - ms-toolsai.jupyter
